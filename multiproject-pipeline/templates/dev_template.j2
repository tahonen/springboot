apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: dev-template
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: Ansible
    creationTimestamp: null
    labels:
      app: {{service_name}}
    name: {{service_name}}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: {{service_name}}
    sessionAffinity: None
    type: ClusterIP
  status:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: Ansible
    creationTimestamp: null
    generation: 1
    labels:
      app: {{service_name}}
    name: {{service_name}}
  spec:
    replicas: 1
    selector:
      deploymentconfig: {{service_name}}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: {{service_name}}
          deploymentconfig: {{service_name}}
      spec:
        containers:
        - image: ''
          imagePullPolicy: Always
          name: {{service_name}}
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - {{service_name}}
        from:
          kind: ImageStreamTag
          name: {{service_name}}:latest
          namespace: {{dev_project}}
      type: ImageChange
    - type: ConfigChange
  status:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: Ansible
    creationTimestamp: null
    labels:
      app: {{service_name}}
    name: {{service_name}}
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: {{service_name}}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      binary: {}
      type: Binary
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: {{builder_image}}
          namespace: openshift
      type: Source
    triggers:
    - generic:
        secret: 055e447310d853c8
      type: Generic
    - github:
        secret: 51cc15d6225e7f67
      type: GitHub
  status:
    lastVersion: 0
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: Ansible
    creationTimestamp: null
    generation: 1
    labels:
      app: {{service_name}}
    name: {{service_name}}
  spec:
    lookupPolicy:
      local: false
  status:
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/generated-by: Ansible
      openshift.io/host.generated: "true"
    labels:
      app: {{service_name}}
    name: {{service_name}}
  spec:
    host: {{dev_hostname}}
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: {{service_name}}
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "{{service_name}}", "namespace": "{{dev_project}}", "kind":
        "DeploymentConfig"}]'
    labels:
      app: {{service_name}}
      name: build-pipeline
    name: build-pipeline
  spec:
    triggers:
      - type: GitHub
        github:
          secret: 123456abddef
      - type: Generic
        generic:
          secret: 123456abddef
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
            import groovy.json.JsonOutput
            def inputRootUrl = "https://jenkins-{{dev_project}}.{{apps_dns}}/job/prod-release-pipeline/"
            def notifySlack(text, channel, attachments) {
                def slackURL = '{{slack_webhook}}'
                def jenkinsIcon = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'

                def payload = JsonOutput.toJson([text: text,
                    channel: channel,
                    username: "openshift",
                    icon_url: jenkinsIcon,
                    attachments: attachments
                ])
                sh "curl -X POST --data-urlencode \'payload=${payload}\' ${slackURL}"
            }
            node('maven') {
              stage ('build') {
                 git branch: '{{source_branch}}', url: '{{source}}'

              }
              stage ('test and analysis') {

              }
              stage ('deploy to dev') {
                sh "oc start-build {{service_name}} --from-dir=. --wait=true -n {{dev_project}}"
                notifySlack("{{service_name}} - New build deployed to DEV!", 'jenkinsbuilds', [])
              }

              stage ('deploy test') {
                notifySlack("{{service_name}} - Build waiting approval for TEST deployment. <"+inputRootUrl+env.BUILD_NUMBER+"/input|Approve>", 'jenkinsbuilds', [])
                timeout(time:5, unit:'MINUTES') {
                  input message: "Promote to TEST?", ok: "Promote"
                    sh "oc tag {{service_name}}:latest {{service_name}}:{{tag_test}} -n {{dev_project}}"
                    sh "oc tag {{service_name}}:{{tag_test}} {{service_name}}:{{tag_prod}} -n {{dev_project}}"
                    notifySlack("{{service_name}} - New build deployed to TEST.", 'jenkinsbuilds', [])
                }
              }
            }
      type: JenkinsPipeline
  status:
    lastVersion: 0
