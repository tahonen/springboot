apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: prod-template
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: Ansible
    creationTimestamp: null
    labels:
      app: {{service_name}}
    name: {{service_name}}-blue
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: {{service_name}}-blue
    sessionAffinity: None
    type: ClusterIP
  status:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: Ansible
    creationTimestamp: null
    labels:
      app: {{service_name}}
    name: {{service_name}}-green
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: {{service_name}}-green
    sessionAffinity: None
    type: ClusterIP
  status:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: Ansible
    creationTimestamp: null
    generation: 1
    labels:
      app: {{service_name}}
    name: {{service_name}}-blue
  spec:
    replicas: 0
    selector:
      deploymentconfig: {{service_name}}-blue
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: {{service_name}}-blue
          deploymentconfig: {{service_name}}-blue
      spec:
        containers:
        - image: {{dev_project}}/{{service_name}}:{{tag_prod}}
          imagePullPolicy: Always
          name: {{service_name}}
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: false
        containerNames:
        - {{service_name}}
        from:
          kind: ImageStreamTag
          name: {{service_name}}:{{tag_prod}}
          namespace: {{dev_project}}
      type: ImageChange
    - type: ConfigChange
  status:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: Ansible
    creationTimestamp: null
    generation: 1
    labels:
      app: {{service_name}}
    name: {{service_name}}-green
  spec:
    replicas: 0
    selector:
      deploymentconfig: {{service_name}}-green
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: {{service_name}}
          deploymentconfig: {{service_name}}-green
      spec:
        containers:
        - image: {{dev_project}}/{{service_name}}:{{tag_prod}}
          imagePullPolicy: Always
          name: {{service_name}}
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: false
        containerNames:
        - {{service_name}}
        from:
          kind: ImageStreamTag
          name: {{service_name}}:{{tag_prod}}
          namespace: {{dev_project}}
      type: ImageChange
    - type: ConfigChange
  status:
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/generated-by: Ansible
      openshift.io/host.generated: "true"
      pipeline.alpha.openshift.io/uses: '[{"name": "{{service_name}}", "namespace": "{{prod_project}}", "kind": "DeploymentConfig"}]'
    labels:
      app: {{service_name}}
    name: {{service_name}}
  spec:
    host: {{prod_hostname}}
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: {{service_name}}-green
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: {{service_name}}
      name: release-pipeline
    name: release-pipeline
  spec:
    triggers:
      - type: GitHub
        github:
          secret: ${WEBHOOK_SECRET}
      - type: Generic
        generic:
          secret: ${WEBHOOK_SECRET}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          import groovy.json.JsonOutput
          def inputRootUrl = "https://jenkins-{{prod_project}}.{{apps_dns}}/job/prod-release-pipeline/"
          def notifySlack(text, channel, attachments) {
              def slackURL = '{{slack_webhook}}'
              def jenkinsIcon = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'

              def payload = JsonOutput.toJson([text: text,
                  channel: channel,
                  username: "openshift",
                  icon_url: jenkinsIcon,
                  attachments: attachments
              ])
              sh "curl -X POST --data-urlencode \'payload=${payload}\' ${slackURL}"
          }

          node('maven') {
            def dest = ""
            def currentDeployment = ""

            stage('deploy to {{prod_project}}') {
              try {
                currentDeployment = sh (
                  script: "oc get route {{service_name}} -n {{prod_project}} -o jsonpath='{ .spec.to.name }'",
                  returnStdout: true)
              } catch(Exception e1) {
              }

              dest = (currentDeployment == '{{service_name}}-green') ? '{{service_name}}-blue':'{{service_name}}-green'
              echo "Active svc: " + currentDeployment
              echo "Dest svc:   " + dest
              sh "oc rollout latest $dest -n {{prod_project}}"
              sh "oc expose svc $dest --name={{prod_project}}-release --hostname={{service_name}}-release.{{apps_dns}} -n {{prod_project}}"
              sh "oc scale dc/$dest --replicas=1 -n {{prod_project}}"
              sh 'oc annotate bc release-pipeline -n {{prod_project}} --overwrite pipeline.alpha.openshift.io/uses=\'[{"name": "' + dest + '", "namespace": "{{prod_project}}", "kind": "DeploymentConfig"}]\''
              sh 'oc annotate route {{prod_project}}-release -n {{prod_project}} --overwrite pipeline.alpha.openshift.io/uses=\'[{"name": "' + dest + '", "namespace": "{{prod_project}}", "kind": "DeploymentConfig"}]\''
              notifySlack("{{service_name}} - New release deployed for verification", 'jenkinsbuilds', [])
            }

            stage('release as A/B') {
              notifySlack("{{service_name}} - Waiting for approval to do A/B deployment. <"+inputRootUrl+env.BUILD_NUMBER+"/input|Approve>", 'jenkinsbuilds', [])
              input "Deploy new version as 'B'?"
              sh "oc scale dc/$dest --replicas=2 -n {{prod_project}}"
              sh 'oc patch route {{service_name}} -n {{prod_project}} -p \'{"spec":{"alternateBackends":[{"kind":"Service", "weight": 20, "name":"' + dest + '"}], "to": {"weight": 80 }}}\''
              echo "B deployment is currently: "+dest
              sh 'oc get route {{service_name}} -n {{prod_project}}'
              sh "oc scale dc/$currentDeployment --replicas=2 -n {{prod_project}}"
              sh "oc delete route {{service_name}}-release -n {{prod_project}}"
            }
            stage('release new version') {
              notifySlack("{{prod_project}} - Waiting for approval to deploy new version to production. <"+inputRootUrl+env.BUILD_NUMBER+"/input|Approve>", 'jenkinsbuilds', [])
              input "Switch Production from $currentDeployment to $dest?"
              sh 'oc patch route {{service_name}} -n {{prod_project}} -p \'{"spec":{"alternateBackends":[], "to":{"name":"' + dest + '", "weight": 100}}}\''
              sh 'oc annotate route {{service_name}} -n {{prod_project}} --overwrite pipeline.alpha.openshift.io/uses=\'[{"name": "' + dest + '", "namespace": "{{prod_project}}", "kind": "DeploymentConfig"}]\''
              echo "Active deployment is currently:" + dest
              sh 'oc get route {{service_name}} -n {{prod_project}}'
              sh "oc scale dc/$currentDeployment --replicas=0 -n {{prod_project}}"
              notifySlack("{{service_name}} - New version deployed to production", 'jenkinsbuilds', [])
            }
          }
      type: JenkinsPipeline
  status:
    lastVersion: 0
parameters:
- description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: WEBHOOK_SECRET
